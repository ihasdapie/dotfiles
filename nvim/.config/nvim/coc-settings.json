// vim:ft=jsonc
{
    "colors.enable": true,
    "coc.source.emoji.filetypes": [
        "gitcommit",
        "markdown",
        "pandoc"
    ],
    "suggest.noselect": true, // Accept first suggestion on TAB
    "rust-analyzer.checkOnSave.command": "clippy",
    "coc.preferences.rootPatterns": [
        ".git",
        ".hg",
        ".vim",
        ".projections.json"
    ],
    "coc.preferences.jumpCommand": "CocSplitIfNotOpen",
    "coc.preferences.currentFunctionSymbolAutoUpdate": true,
    /* "coc.source.coc-tabnine.priority": 50, */
    // "tabnine.disable_filetypes": ["pandoc", "markdown", "latex", "html", "txt"],
    /* Coc-Python  */
    "pyright.inlayHints.variableTypes": false,
    "pyright.inlayHints.functionReturnTypes": false,
    "pyright.inlayHints.parameterTypes": false,
    "python.formatting.provider": "ruff",
    "python.linting.ruffEnabled": true,
    // "python.linting.pylintEnabled": true,
    // "python.linting.pylintArgs": ["--disable=R,C", "--generated-members=numpy.*,torch.*"],
    // "python.linting.flake8Enabled": true,
    // "python.linting.flake8Args": ["--max-line-length=120", "--import-order-style=google"],
    // "python.linting.mypyEnabled": true,
    // "python.linting.pydocstyleEnabled": true,
    "python.venvPath": "/home/ihasdapie/.cache/pypoetry/virtualenvs",
    "coc.preferences.formatOnSave": true,
    "coc.preferences.formatOnSaveTimeout": 200,
    /* Coc-Explorer */
    "explorer.icon.enableNerdfont": true,
    "explorer.icon.source": "nvim-web-devicons",
    "explorer.file.child.template": "[git | 2] [selection | clip | 1] [indent][icon | 1] [diagnosticError & 1][filename omitCenter 1][modified][readonly] [linkIcon & 1][link growRight 1 omitCenter 5]",
    "explorer.buffer.root.template": "[icon & 1] OPEN EDITORS",
    "explorer.file.root.template": "[icon & 1] PROJECT ([root])",
    /* coc-vimtex */
    "coc.source.vimtex.filetypes": [
        "tex",
        "plaintex",
        "latex",
        "markdown",
        "pandoc"
    ],
    "suggest.completionItemKindLabels": {
        // NOTE: 2-length itemkindlabels get screwed up by transparent pum
        "keyword": "Ôáû ",
        "variable": "Óûõ ",
        "value": "ÓÆµ ",
        "function": "ùëì",
        "operator": "Œ®",
        "method": "ÔÇö",
        "constructor": "ÔÇ≠ ",
        "reference": "ÔíΩ ",
        "constant": " Û∞Ä± ",
        "struct": "Ó™ë ", // This char is weird?? nf-mdi-file_tree Ô≠Ñ
        "class": "ÔÉ® ",
        "interface": "Ó≠° ",
        "text": "Óòí ",
        "enum": "Ôêµ ",
        "enumMember": "ÔÄ´ ",
        "module": "Ôêç ", // why does this show up in different sizes?
        "color": "Óà´ ",
        "property": "Óò§ ",
        "field": "Ó≠ü ",
        "unit": "Ôëµ ",
        "event": "Ó™Ü",
        "file": "Ó´© ",
        "folder": "ÔÑî ",
        "snippet": "Óòã ",
        "typeParameter": "ÓÆπ  ",
        "default": "Ôäú ",
    },
    "ruff.autoFixOnSave": true,
    /* "suggest.completionItemKindLabels": {
        "method": " Óûõ ",
        "function": " Óûõ ",
        "variable": "[Óúñ]",
        "field": " Óúñ ",
        "typeParameter": "<ÔûÉ>",
        "constant": " Ôõº ",
        "class": " Ô≠Ñ ",
        "interface": " Ô®†",
        "struct": " ÔÜ≥ ",
        "event": " ÔÉß ",
        "operator": " Ôöî ",
        "module": " Ôô® ",
        "property": " ÔÇ≠ ",
        "reference": " ÔíÅ ",
        "keyword": " Ôùß ",
        "file": " ÔÖõ ",
        "folder": " Ô±Æ ",
        "color": " Óà´ ",
        "unit": " Ô•¨ ",
        "snippet": " Ôóè ",
        "text": " Ôî´ ",
        "constructor": " Óàè ",
        "value": " Ô¢ü ",
        "enumMember": " ÔÖù "
    }, */
    "pyright.inlayHints.variableTypes": false,
    "pyright.inlayHints.parameterTypes": false,
    "pyright.inlayHints.functionReturnTypes": false,
    /* Coc-Diagnostics */
    "diagnostic.level": "hint",
    "diagnostic.displayByAle": false,
    "diagnostic.errorSign": "ÔÅ±",
    "diagnostic.warningSign": "ÔÅö",
    "diagnostic.infoSign": "ÔÄ§",
    "diagnostic.hintSign": "ÔêÄ",
    "diagnostic.enableMessage": "jump",
    "diagnostic.messageTarget": "float",
    // "diagnostic.virtualText": true,
    // "diagnostic.virtualText": true,
    // "diagnostic.checkCurrentLine": true,
    /* Coc-Snippets */
    "snippets.snipmate.enable": false,
    "snippets.priority": 99,
    /* Coc-lua */
    // We want to be able to develop for neovim...
    "Lua.workspace.library": {
        "/usr/share/nvim/runtime/lua": true,
        "/usr/share/nvim/runtime/lua/vim": true,
        "/usr/share/nvim/runtime/lua/vim/lsp": true
    },
    "Lua.diagnostics.globals": [
        "vim"
    ],
    "Lua.workspace.maxPreload": 5000,
    "Lua.workspace.checkThirdParty": false,
    "highlight.colorNames.enable": false,
    "clangd.arguments": [
        "--background-index",
        // "--all-scopes-completion",
        "--header-insertion=iwyu",
        "--compile-commands-dir=${workspaceFolder}/",
        "--clang-tidy"
    ],
    // "clangd.fallbackFlags": ["-std=c++17"]
    "go.goplsOptions": {
        "verboseOutput": true,
        "completeUnimported": true,
        "usePlaceholders": true,
        "hoverKind": "FullDocumentation",
        "memoryMode": "DegradeClosed",
        "gofumpt": true,
        "env": {
            "GO111MODULE": "off",
            // "GOPACKAGESDRIVER": "/home/user/go-code-sparse/tools/ide/managed_gopadrv.sh",
        },
        "directoryFilters": [
            "-**/bazel-bin",
            "-**/bazel-out",
            "-**/bazel-testlogs",
            "-**/bazel-mypkg",
            // "-**/bazel-pkgdrv",
            "-**/bazel-go-code-sparse",
        ],
    },
    "snippets.ultisnips.pythonPrompt": false
}
